import datetime, threading, time
from pyqiwip2p import QiwiP2P
from aiogram.utils.exceptions import TelegramAPIError
from pyqiwip2p.types import QiwiCustomer, QiwiDatetime
from datetime import timedelta
from aiogram.types import ParseMode
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import text, bold, italic, code
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db import Database
import asyncio
from config import TOKEN, QIWIKEY

p2p = QiwiP2P(auth_key=QIWIKEY)
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
db = Database('database.db')
now = datetime.datetime.now()
BROADCAST_STATE = State('broadcast')


inline_btn_1 = InlineKeyboardButton('üí≥–û–ø–ª–∞—Ç–∏—Ç—å', callback_data='pay1')
inline_kb1 = InlineKeyboardMarkup().add(inline_btn_1)
inline_btn_3 = InlineKeyboardButton('üí≥–û–ø–ª–∞—Ç–∏—Ç—å', callback_data='pay2')
inline_kb3 = InlineKeyboardMarkup().add(inline_btn_3)
inline_btn_2 = InlineKeyboardButton('‚öô–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data='check')
proverka = InlineKeyboardMarkup().add(inline_btn_2)
inline_btn_4 = InlineKeyboardButton('‚öô–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data='check2')
proverka2 = InlineKeyboardMarkup().add(inline_btn_4)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["üíé–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ", "üëÄ–û–±–∑–æ—Ä –ø—Ä–∏–≤–∞—Ç–∫–∏"]
    keyboard.add(*buttons)
    if message.chat.type == 'private':
        if not db.user_exists(message.from_user.id):
            db.add_user(message.from_user.id)
        else:
            db.set_active(message.from_user.id, 1)
        await bot.send_message(message.from_user.id, "ü•∫–ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø –≤ –æ–¥–∏–Ω –∏–∑ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"
                                                     "üëâüèªüëàüèª \n\n –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø–æ–¥—Ä–æ–±–Ω–µ–µ"
                                                     , reply_markup=keyboard, disable_web_page_preview=True)


@dp.message_handler(commands='cancel', state='*')
async def broadcast2(msg: types.Message, state: FSMContext):
    await state.set_state(None)
    await msg.reply("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∏")


@dp.message_handler(commands='broadcast', user_id=[936845322])
async def broadcast(msg: types.Message):
    await msg.answer("–†–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏. \n \n –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
    await BROADCAST_STATE.set()

@dp.message_handler(content_types='any', state=BROADCAST_STATE)
async def broadcast2(msg: types.Message):
    USERS_IDS = db.get_users()
    for row in USERS_IDS:
        try:
            await msg.copy_to(row[0])
            await asyncio.sleep(0.1)
            if int(row[1]) != 1:
                db.set_active(row[0], 1)
        except TelegramAPIError:
            db.set_active(row[0], 0)

    await msg.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞, \n\n /cancel —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.")


@dp.message_handler(lambda message: message.text == "üëÄ–û–±–∑–æ—Ä –ø—Ä–∏–≤–∞—Ç–∫–∏")
async def with_puree(message: types.Message):
    await message.answer(
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –ø—Ä–∏–≤–∞—Ç–æ–∫ –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ: \n\n https://telegra.ph/Obzor-privata--Review-on-a-private-channel-10-22")

@dp.message_handler(lambda message: message.text == "üíé–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ")  # –¢–ê–†–ò–§–´
async def without_puree(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="üéâ–û–±—ã—á–Ω—ã–π –¥–æ—Å—Ç—É–ø", callback_data="acces1"))
    keyboard.add(types.InlineKeyboardButton(text="üî•–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø", callback_data="acces2"))
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüëáüèª", reply_markup=keyboard)

@dp.callback_query_handler(text='acces1')
async def process_callback_acces1(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="üí≥–û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay1"))
    try:
        p2p.reject(bill_id=new_bill.bill_id)
    except:
        pass
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '*–¢–∞—Ä–∏—Ñ:* üéâ–û–±—ã—á–Ω—ã–π –¥–æ—Å—Ç—É–ø \
                                                        \n*–°—Ç–æ–∏–º–æ—Å—Ç—å:* 379 üá∑üá∫RUB \
                                                        \n*–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è*: –±–µ—Å—Å—Ä–æ—á–Ω–æ \
                                                        \n\n‚≠êÔ∏è–î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ *–ù–ê–í–°–ï–ì–î–ê*',
                           parse_mode="MarkdownV2", reply_markup=inline_kb1)

@dp.callback_query_handler(text='acces2')
async def process_callback_acces1(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="üí≥–û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay2"))
    try:
        p2p.reject(bill_id=new_bill.bill_id)
    except:
        pass
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '*–¢–∞—Ä–∏—Ñ:* üî•–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø \
                                                        \n*–°—Ç–æ–∏–º–æ—Å—Ç—å:* 589 üá∑üá∫RUB \
                                                        \n*–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:* –±–µ—Å—Å—Ä–æ—á–Ω–æ \
                                                        \n\n‚≠ê*–°–∞–º—ã–π –≤—ã–≥–æ–¥–Ω—ã–π —Ç–∞—Ä–∏—Ñ* \n –î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ *–ù–ê–í–°–ï–ì–î–ê* \
                                                        \n\nüéÅ–î–æ—Å—Ç—É–ø –∫ —Å–ª–∏—Ç—ã–º –ø–∞–∫–∞–º –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ —É–∂–µ –æ–∫–æ–ª–æ 25 000—Ä', parse_mode="MarkdownV2", reply_markup=inline_kb3)

@dp.callback_query_handler(text='pay1')
async def process_callback_pay1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    global bill
    price = 1  # –¶–µ–Ω–∞ –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lifetime = 7  # –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏
    comment = '–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞'  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É, –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –ª—é–±—ã–º
    bill = p2p.bill(amount=price, lifetime=lifetime, comment=comment)  # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç
    link_oplata = bill.pay_url  # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –∏–∑ –Ω–∞—à–µ–≥–æ —Å—á–µ—Ç–∞
    await bot.send_message(callback_query.from_user.id, text=f"–î–ª—è –æ–ø–ª–∞—Ç—ã, –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ {link_oplata}", reply_markup=proverka)
    # x = threading.Thread(target=functionoplata) # Target - –¥–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –∞ –≤ –Ω–∞—à–µ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–ø–ª–∞—Ç—É. Args - –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –¥–æ–ø—É—Å—Ç–∏–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
    # x.start()  # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞


@dp.callback_query_handler(text='pay2')
async def process_callback_pay2(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    global bill
    price = 2  # –¶–µ–Ω–∞ –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lifetime = 7  # –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏
    comment = '–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞'  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É, –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –ª—é–±—ã–º
    bill = p2p.bill(amount=price, lifetime=lifetime, comment=comment)  # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç
    link_oplata = bill.pay_url  # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –∏–∑ –Ω–∞—à–µ–≥–æ —Å—á–µ—Ç–∞
    await bot.send_message(callback_query.from_user.id, text=f"–î–ª—è –ü–†–ï–ú–ò–£–ú –æ–ø–ª–∞—Ç—ã, –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ {link_oplata}",
                           reply_markup=proverka2)


@dp.callback_query_handler(text='check')
async def process_callback_check(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    oplata_time = datetime.datetime.now()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    datetime_delta = oplata_time + timedelta(minutes=7)  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏.
    status = p2p.check(bill_id=bill.bill_id).status #–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã

    if status == 'PAID': #–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞ —Ç–æ - –¥–æ—à–ª–∞ –ª–∏ –æ–ø–ª–∞—Ç–∞ –¥–æ –±–æ—Ç–∞. –í—Å–ª—É—á–∞–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –æ–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–π if.
        await bot.send_message(callback_query.from_user.id,'–û–ø–ª–∞—Ç–∞ –¥–æ—à–ª–∞')
    if status == 'WAITING':
        await bot.send_message(callback_query.from_user.id, text=f'–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–ª—è –æ–ø–ª–∞—Ç—ã, –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ',reply_markup=proverka)
    elif datetime.datetime.now() > datetime_delta:
        await bot.send_message(callback_query.from_user.id,'–ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É')
time.sleep(0.1) #–°–ø–∏–º –Ω–µ–∫–æ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –∫—Ä–∞—à–Ω—É–ª—Å—è.

@dp.callback_query_handler(text='check2')
async def process_callback_check(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    oplata_time = datetime.datetime.now()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    datetime_delta = oplata_time + timedelta(minutes=7)  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏.
    status = p2p.check(bill_id=bill.bill_id).status #–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã

    if status == 'PAID': #–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞ —Ç–æ - –¥–æ—à–ª–∞ –ª–∏ –æ–ø–ª–∞—Ç–∞ –¥–æ –±–æ—Ç–∞. –í—Å–ª—É—á–∞–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –æ–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–π if.
        await bot.send_message(callback_query.from_user.id,'–î—Ä—É–≥–∞—è –æ–ø–ª–∞—Ç–∞ –¥–æ—à–ª–∞')
    if status == 'WAITING':
        await bot.send_message(callback_query.from_user.id, text=f'–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–ª—è –æ–ø–ª–∞—Ç—ã, –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ',reply_markup=proverka2)
    elif datetime.datetime.now() > datetime_delta:
        await bot.send_message(callback_query.from_user.id,'–ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É')
time.sleep(0.1) #–°–ø–∏–º –Ω–µ–∫–æ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –∫—Ä–∞—à–Ω—É–ª—Å—è.

# @dp.message_handler(commands=['start'])
# async def welcome(message: types.Message):
#     try:
#         p2p.reject(bill_id=new_bill.bill_id)
#     except:
#         pass
#     await message.answer('–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∞—Ä–±—É–∑?\n–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø—Ä–æ–ø–∏—à–∏—Ç–µ /buywatermelon')


# @dp.message_handler(commands=['buywatermelon'])
# async def buy(message: types.Message):
#     global bill
#     price = 1 #–¶–µ–Ω–∞ –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     lifetime = 7 #–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏
#     comment = '–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞' #–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É, –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –ª—é–±—ã–º
#     bill = p2p.bill(amount=price, lifetime=lifetime, comment=comment) #–°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç
#     link_oplata = bill.pay_url #–ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –∏–∑ –Ω–∞—à–µ–≥–æ —Å—á–µ—Ç–∞
#     await message.answer(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!\n–ê—Ä–±—É–∑ —Å—Ç–æ–∏—Ç: {price} —Ä—É–±–ª–µ–π\n–°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 7 –º–∏–Ω—É—Ç\n–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: {link_oplata}')
#     x = threading.Thread(target=functionoplata, args=(message,)) #Target - –¥–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –∞ –≤ –Ω–∞—à–µ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–ø–ª–∞—Ç—É. Args - –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –¥–æ–ø—É—Å—Ç–∏–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
#     x.start() #–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞

# async def functionoplata(message: types.Message): #–§—É–Ω–∫—Ü–∏—è, –µ–µ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–∞–∂–µ –Ω–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π - –≤–µ–¥—å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –ø–æ—Ç–æ–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
#     oplata_time = datetime.datetime.now() #–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
#     datetime_delta = oplata_time + timedelta(minutes=7) #–ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏.
#     while True: #–°–æ–∑–¥–∞–Ω–∏–µ —Ü–∏–∫–ª–∞
#         status = p2p.check(bill_id=bill.bill_id).status #–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
#         if status == 'PAID': #–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞ —Ç–æ - –¥–æ—à–ª–∞ –ª–∏ –æ–ø–ª–∞—Ç–∞ –¥–æ –±–æ—Ç–∞. –í—Å–ª—É—á–∞–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –æ–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–π if.
#             await message.answer('–û–ø–ª–∞—Ç–∞ –¥–æ—à–ª–∞ –¥–æ –Ω–∞—Å! –ê—É–µ')
#             break #–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞
#         elif datetime.datetime.now() > datetime_delta: #–î–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, –Ω–∞ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã. –¢–æ –µ—Å—Ç—å –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–ø–ª–∞—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–∏ 7-–º–∏ –º–∏–Ω—É—Ç, —Ü–∏–∫–ª –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç—Å—è.
#             await message.answer('–º—É–∂–∏–∫, —Ç—ã —á–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª')
#             break #–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞
#     time.sleep(0.1) #–°–ø–∏–º –Ω–µ–∫–æ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –∫—Ä–∞—à–Ω—É–ª—Å—è.
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True) #–ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
