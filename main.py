import datetime, threading, time
from pyqiwip2p import QiwiP2P
from aiogram.utils.exceptions import TelegramAPIError
from pyqiwip2p.types import QiwiCustomer, QiwiDatetime
from datetime import timedelta
from aiogram.types import ParseMode
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
import aiogram.utils.markdown as fmt
from aiogram.utils.markdown import text, bold, italic, code
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db import Database
import asyncio
from config import TOKEN, QIWIKEY

p2p = QiwiP2P(auth_key=QIWIKEY)
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
db = Database('database.db')
now = datetime.datetime.now()
BROADCAST_STATE = State('broadcast')


inline_btn_1 = InlineKeyboardButton('üí≥–û–ø–ª–∞—Ç–∏—Ç—å', callback_data='pay1')
inline_kb1 = InlineKeyboardMarkup().add(inline_btn_1)
inline_btn_3 = InlineKeyboardButton('üí≥–û–ø–ª–∞—Ç–∏—Ç—å', callback_data='pay2')
inline_kb3 = InlineKeyboardMarkup().add(inline_btn_3)
inline_btn_5 = InlineKeyboardButton('üí≥–û–ø–ª–∞—Ç–∏—Ç—å', callback_data='pay3')
inline_kb5 = InlineKeyboardMarkup().add(inline_btn_5)
inline_btn_6 = InlineKeyboardButton('üí≥–û–ø–ª–∞—Ç–∏—Ç—å', callback_data='pay4')
inline_kb6 = InlineKeyboardMarkup().add(inline_btn_6)

inline_btn_2 = InlineKeyboardButton('‚öô–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data='check')
proverka = InlineKeyboardMarkup().add(inline_btn_2)
inline_btn_4 = InlineKeyboardButton('‚öô–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data='check2')
proverka2 = InlineKeyboardMarkup().add(inline_btn_4)
inline_btn_7 = InlineKeyboardButton('‚öô–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data='check3')
proverka3 = InlineKeyboardMarkup().add(inline_btn_7)
inline_btn_8 = InlineKeyboardButton('‚öô–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data='check4')
proverka4 = InlineKeyboardMarkup().add(inline_btn_8)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["üíé–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ", "üëÄ–û–±–∑–æ—Ä –ø—Ä–∏–≤–∞—Ç–∫–∏"]
    keyboard.add(*buttons)
    if message.chat.type == 'private':
        if not db.user_exists(message.from_user.id):
            db.add_user(message.from_user.id)
        else:
            db.set_active(message.from_user.id, 1)
        await bot.send_message(message.from_user.id, "ü•∫–ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø –≤ –æ–¥–∏–Ω –∏–∑ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"
                                                     "üëâüèªüëàüèª \n\n –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø–æ–¥—Ä–æ–±–Ω–µ–µ"
                                                     , reply_markup=keyboard, disable_web_page_preview=True)


@dp.message_handler(commands='cancel', state='*')
async def broadcast2(msg: types.Message, state: FSMContext):
    await state.set_state(None)
    await msg.reply("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∏")


@dp.message_handler(commands='broadcast', user_id=[936845322])
async def broadcast(msg: types.Message):
    await msg.answer("–†–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏. \n \n –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
    await BROADCAST_STATE.set()

@dp.message_handler(content_types='any', state=BROADCAST_STATE)
async def broadcast2(msg: types.Message):
    USERS_IDS = db.get_users()
    for row in USERS_IDS:
        try:
            await msg.copy_to(row[0])
            await asyncio.sleep(0.1)
            if int(row[1]) != 1:
                db.set_active(row[0], 1)
        except TelegramAPIError:
            db.set_active(row[0], 0)

    await msg.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞, \n\n /cancel —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.")


@dp.message_handler(lambda message: message.text == "üëÄ–û–±–∑–æ—Ä –ø—Ä–∏–≤–∞—Ç–∫–∏")
async def with_puree(message: types.Message):
    await message.answer(
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –ø—Ä–∏–≤–∞—Ç–æ–∫ –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ: \n\n https://telegra.ph/Obzor-privata--Review-on-a-private-channel-10-22")

@dp.message_handler(lambda message: message.text == "üíé–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ")  # –¢–ê–†–ò–§–´
async def without_puree(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="üç™2D –õ0–ªb–∫–∏", callback_data="acces1"))
    keyboard.add(types.InlineKeyboardButton(text="üì¶h3nta1 –ø–∞–∫–∏", callback_data="acces2"))
    keyboard.add(types.InlineKeyboardButton(text="ü•µ3D L0–ª–∏", callback_data="acces3"))
    keyboard.add(types.InlineKeyboardButton(text="üî•–í—Å—ë —Å—Ä–∞–∑—É", callback_data="acces4"))
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüëáüèª", reply_markup=keyboard)

@dp.callback_query_handler(text='acces1')
async def process_callback_acces1(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="üí≥–û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay1"))
    try:
        p2p.reject(bill_id=new_bill.bill_id)
    except:
        pass
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '*–¢–∞—Ä–∏—Ñ:* üç™2D –õ0–ªb–∫–∏ \
                                                        \n*–°—Ç–æ–∏–º–æ—Å—Ç—å:* ~479~ 379 üá∑üá∫RUB \
                                                        \n*–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è*: –±–µ—Å—Å—Ä–æ—á–Ω–æ \
                                                        \n\n üç™–õ—é–±–∏—à—å –ø–µ—á–µ–Ω—å–∫–∏? \
                                                        \n\n –≠—Ç–∞ –ø—Ä–∏–≤–∞—Ç–∫–∞ –ø–æ–¥–æ–π–¥–µ—Ç –¥–ª—è –≤—Å–µ—Ö —Ü–µ–Ω–∏—Ç–µ–ª–µ–π 1–æ1–∏–∫–æ–Ω–∞ \
                                                        \n –í–Ω—É—Ç—Ä–∏ —Ü–µ–ª—ã–µ —Å–µ—Ä–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ–∑–¥–µ –º—É–ª—å—Ç–∏–∫–æ–≤, –∞—Ä—Ç—ã –∏ –≤–∏–¥–µ–æ —Å —É—á–∞—Å—Ç–∏–µ–º –º–∞–ª–µ–Ω—å–∫–∏—Ö –∫—Ä–∞—Å–æ—Ç–æ–∫ \
                                                        \n\n üè¥‚Äç‚ò†Ô∏è–ë–æ–ª—å—à—É—é —á–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±–µ—Ä—ë–º —Å —Ç–µ–Ω–µ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ \
                                                        \n\n‚ôªÔ∏è–ö–æ–Ω—Ç–µ–Ω—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è',
                           parse_mode="MarkdownV2", reply_markup=inline_kb1)

@dp.callback_query_handler(text='acces2')
async def process_callback_acces1(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="üí≥–û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay2"))
    try:
        p2p.reject(bill_id=new_bill.bill_id)
    except:
        pass
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '*–¢–∞—Ä–∏—Ñ:* üì¶h3nta1 –ø–∞–∫–∏ \
                                                        \n*–°—Ç–æ–∏–º–æ—Å—Ç—å:* ~399~ 289 üá∑üá∫RUB \
                                                        \n*–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è*: –±–µ—Å—Å—Ä–æ—á–Ω–æ \
                                                        \n\n –î–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –æ–∫–æ–ª–æ 17 000 –†—É–±\
                                                         \n–í—Å–µ –ø–∞–∫–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ –Ø–Ω–¥–µ–∫—Å–î–∏—Å–∫, —Å—Å—ã–ª–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ –∫–∞–Ω–∞–ª–µ \
                                                        \n\n–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–∑—É',
                           parse_mode="MarkdownV2", reply_markup=inline_kb3)

    @dp.callback_query_handler(text='acces3')
    async def process_callback_acces1(callback_query: types.CallbackQuery):
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="üí≥–û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay3"))
        try:
            p2p.reject(bill_id=new_bill.bill_id)
        except:
            pass
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, '*–¢–∞—Ä–∏—Ñ:* ü•µ3D L0–ª–∏ \
                                                            \n*–°—Ç–æ–∏–º–æ—Å—Ç—å:* ~689~ 479 üá∑üá∫RUB \
                                                            \n*–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è*: –±–µ—Å—Å—Ä–æ—á–Ω–æ \
                                                            \n\n *–í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ—Å—É—Ä—Å–∞–º:*\
                                                            \n –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª \
                                                            \n\nüî•–¢–æ, –∑–∞ —á–µ–º –≤—Å–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–ºüî•\
                                                            \n\n–§–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –≤–∏–¥–µ–æ –∏–∑ —Å–∞–º—ã—Ö —Ç–µ–º–Ω—ã—Ö —É–≥–æ–ª–∫–æ–≤ –¥–∞—Ä–∫–Ω–µ—Ç–∞ \
                                                             \n–¢–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç \n–í—Å–µ —Ñ—É–ª–ª—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã\
                                                            \n\n–ú–∏–ª—ã–µ 3D –º–æ–¥–µ–ª–∏ –Ω–µ –æ—Å—Ç–∞–≤—è—Ç —Ç–µ–±—è —Ä–∞–≤–Ω–æ–¥—É—à–Ω—ã–º ü•∞\
                                                             \n\nüî•*–ë–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏*',
                               parse_mode="MarkdownV2", reply_markup=inline_kb5)

@dp.callback_query_handler(text='acces4')
async def process_callback_acces1(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="üí≥–û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay4"))
    try:
        p2p.reject(bill_id=new_bill.bill_id)
    except:
        pass
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '*–¢–∞—Ä–∏—Ñ:* üî•–í—Å—ë —Å—Ä–∞–∑—É \
                                                        \n*–°—Ç–æ–∏–º–æ—Å—Ç—å:* ~1499~ 789 üá∑üá∫RUB \
                                                        \n*–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:* –±–µ—Å—Å—Ä–æ—á–Ω–æ \
                                                        \n\n‚≠ê*–°–∞–º—ã–π –≤—ã–≥–æ–¥–Ω—ã–π —Ç–∞—Ä–∏—Ñ* \n –î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ *–ù–ê–í–°–ï–ì–î–ê* \
                                                        \n\nüéÅ –î–æ—Å—Ç—É–ø –∫ —Å–ª–∏—Ç—ã–º –ø–∞–∫–∞–º –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ —É–∂–µ –æ–∫–æ–ª–æ 25 000—Ä \
                                                        \n\n üé•  –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É —Å 3D l01–∏ –≤–∏–¥–µ–æ \
                                                        \n\n –ê–±—Å–æ–ª—é—Ç–Ω—ã–π —ç–∫—Å–∫–ª—é–∑–∏–≤, —ç—Ç–æ –Ω–µ —Ç–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª, —á—Ç–æ –≥—É–ª—è–µ—Ç –∏–∑ –æ–¥–Ω–æ–π –ø—Ä–∏–≤–∞—Ç–∫–∏ –≤ –¥—Ä—É–≥—É—é \
                                                        \n\n *–û–±–µ—â–∞—é, —á—Ç–æ —Ç–∞–∫–æ–≥–æ —Ç—ã –µ—â—ë –Ω–∏–≥–¥–µ –Ω–µ –≤–∏–¥–µ–ª –∏ –≤—Ä—è–¥ –ª–∏ –Ω–∞–π–¥—ë—à—å —Å–∞–º* üíå', parse_mode="MarkdownV2", reply_markup=inline_kb6)

@dp.callback_query_handler(text='pay1')
async def process_callback_pay1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    global bill
    price = 379  # –¶–µ–Ω–∞ –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lifetime = 30  # –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏
    comment = '–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞'  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É, –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –ª—é–±—ã–º
    bill = p2p.bill(amount=price, lifetime=lifetime, comment=comment)  # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç
    link_oplata = bill.pay_url  # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –∏–∑ –Ω–∞—à–µ–≥–æ —Å—á–µ—Ç–∞
    await bot.send_message(callback_query.from_user.id, text=f'–î–ª—è –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–∞ üç™2D –õ0–ªb–∫–∏, –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ {link_oplata}', reply_markup=proverka)
    # x = threading.Thread(target=functionoplata) # Target - –¥–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –∞ –≤ –Ω–∞—à–µ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–ø–ª–∞—Ç—É. Args - –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –¥–æ–ø—É—Å—Ç–∏–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
    # x.start()  # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞


@dp.callback_query_handler(text='pay2')
async def process_callback_pay2(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    global bill
    price = 289  # –¶–µ–Ω–∞ –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lifetime = 30  # –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏
    comment = '–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞'  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É, –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –ª—é–±—ã–º
    bill = p2p.bill(amount=price, lifetime=lifetime, comment=comment)  # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç
    link_oplata = bill.pay_url  # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –∏–∑ –Ω–∞—à–µ–≥–æ —Å—á–µ—Ç–∞
    await bot.send_message(callback_query.from_user.id, text=f"–î–ª—è –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–∞ üì¶h3nta1 –ø–∞–∫–∏, –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ {link_oplata}", reply_markup=proverka2)

@dp.callback_query_handler(text='pay3')
async def process_callback_pay2(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    global bill
    price = 479  # –¶–µ–Ω–∞ –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lifetime = 30  # –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏
    comment = '–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞'  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É, –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –ª—é–±—ã–º
    bill = p2p.bill(amount=price, lifetime=lifetime, comment=comment)  # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç
    link_oplata = bill.pay_url  # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –∏–∑ –Ω–∞—à–µ–≥–æ —Å—á–µ—Ç–∞
    await bot.send_message(callback_query.from_user.id, text=f"–î–ª—è –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–∞ ü•µ3D L0–ª–∏, –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ {link_oplata}", reply_markup=proverka3)

@dp.callback_query_handler(text='pay4')
async def process_callback_pay2(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    global bill
    price = 789  # –¶–µ–Ω–∞ –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lifetime = 30  # –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏
    comment = '–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞'  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É, –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –ª—é–±—ã–º
    bill = p2p.bill(amount=price, lifetime=lifetime, comment=comment)  # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç
    link_oplata = bill.pay_url  # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –∏–∑ –Ω–∞—à–µ–≥–æ —Å—á–µ—Ç–∞
    await bot.send_message(callback_query.from_user.id, text=f"–î–ª—è –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–∞ üî•–í—Å—ë —Å—Ä–∞–∑—É, –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ {link_oplata}", reply_markup=proverka4)

@dp.callback_query_handler(text='check')
async def process_callback_check(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    oplata_time = datetime.datetime.now()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    datetime_delta = oplata_time + timedelta(minutes=7)  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏.
    status = p2p.check(bill_id=bill.bill_id).status #–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã

    if status == 'PAID': #–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞ —Ç–æ - –¥–æ—à–ª–∞ –ª–∏ –æ–ø–ª–∞—Ç–∞ –¥–æ –±–æ—Ç–∞. –í—Å–ª—É—á–∞–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –æ–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–π if.
        chat_id = -1001558897531
        chatlink = await bot.create_chat_invite_link(chat_id, member_limit=1)
        await bot.send_message(callback_query.from_user.id, text=f'–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É ü•∞\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª c –ø–µ—á–µ–Ω—å–∫–∞–º–∏:')
        print(chatlink.invite_link)
        await bot.send_message(callback_query.from_user.id, text=f"{chatlink.invite_link}")
    if status == 'WAITING':
        await bot.send_message(callback_query.from_user.id, text=f'–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–ª—è –æ–ø–ª–∞—Ç—ã, –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ',reply_markup=proverka)
    elif datetime.datetime.now() > datetime_delta:
        await bot.send_message(callback_query.from_user.id,'–ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É')
time.sleep(0.1)

@dp.callback_query_handler(text='check2')
async def process_callback_check(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    oplata_time = datetime.datetime.now()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    datetime_delta = oplata_time + timedelta(minutes=7)  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏.
    status = p2p.check(bill_id=bill.bill_id).status #–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã

    if status == 'PAID': #–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞ —Ç–æ - –¥–æ—à–ª–∞ –ª–∏ –æ–ø–ª–∞—Ç–∞ –¥–æ –±–æ—Ç–∞. –í—Å–ª—É—á–∞–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –æ–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–π if.
        chat_id = -1001695163553
        chatlink = await bot.create_chat_invite_link(chat_id, member_limit=1)
        await bot.send_message(callback_query.from_user.id, text=f'–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É ü•∞\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª —Å –ø–∞–∫–∞–º–∏:')
        print(chatlink.invite_link)
        await bot.send_message(callback_query.from_user.id, text=f"{chatlink.invite_link}")
    if status == 'WAITING':
        await bot.send_message(callback_query.from_user.id, text=f'–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–ª—è –æ–ø–ª–∞—Ç—ã, –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ',reply_markup=proverka2)
    elif datetime.datetime.now() > datetime_delta:
        await bot.send_message(callback_query.from_user.id,'–ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É')
time.sleep(0.1) #–°–ø–∏–º –Ω–µ–∫–æ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –∫—Ä–∞—à–Ω—É–ª—Å—è.

@dp.callback_query_handler(text='check3')
async def process_callback_check(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    oplata_time = datetime.datetime.now()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    datetime_delta = oplata_time + timedelta(minutes=7)  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏.
    status = p2p.check(bill_id=bill.bill_id).status #–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã

    if status == 'PAID': #–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞ —Ç–æ - –¥–æ—à–ª–∞ –ª–∏ –æ–ø–ª–∞—Ç–∞ –¥–æ –±–æ—Ç–∞. –í—Å–ª—É—á–∞–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –æ–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–π if.
        chat_id = -1001703522776
        chatlink = await bot.create_chat_invite_link(chat_id, member_limit=1)
        await bot.send_message(callback_query.from_user.id, text=f'–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É ü•∞\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª:')
        print(chatlink.invite_link)
        await bot.send_message(callback_query.from_user.id,
                               text=f"{chatlink.invite_link}")
    if status == 'WAITING':
        await bot.send_message(callback_query.from_user.id, text=f'–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–ª—è –æ–ø–ª–∞—Ç—ã, –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ',reply_markup=proverka3)
    elif datetime.datetime.now() > datetime_delta:
        await bot.send_message(callback_query.from_user.id,'–ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É')
time.sleep(0.1)

@dp.callback_query_handler(text='check4')
async def process_callback_check(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    oplata_time = datetime.datetime.now()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    datetime_delta = oplata_time + timedelta(minutes=7)  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏.
    status = p2p.check(bill_id=bill.bill_id).status #–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã

    if status == 'PAID': #–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞ —Ç–æ - –¥–æ—à–ª–∞ –ª–∏ –æ–ø–ª–∞—Ç–∞ –¥–æ –±–æ—Ç–∞. –í—Å–ª—É—á–∞–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –æ–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–π if.
        chat_id = -1001558897531
        chat_id2 = -1001695163553
        chat_id3 = -1001703522776
        chatlink = await bot.create_chat_invite_link(chat_id, member_limit=1)
        chatlink2 = await bot.create_chat_invite_link(chat_id2, member_limit=1)
        chatlink3 = await bot.create_chat_invite_link(chat_id3, member_limit=1)
        await bot.send_message(callback_query.from_user.id, text=f'–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É ü•∞\n\n–°—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:')
        await bot.send_message(callback_query.from_user.id,
                               text=f"–°—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: {chatlink.invite_link}\n{chatlink2.invite_link}\n{chatlink3.invite_link}")
    if status == 'WAITING':
        await bot.send_message(callback_query.from_user.id, text=f'–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–ª—è –æ–ø–ª–∞—Ç—ã, –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ',reply_markup=proverka4)
    elif datetime.datetime.now() > datetime_delta:
        await bot.send_message(callback_query.from_user.id,'–ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É')
time.sleep(0.1)
# @dp.message_handler(commands=['start'])
# async def welcome(message: types.Message):
#     try:
#         p2p.reject(bill_id=new_bill.bill_id)
#     except:
#         pass
#     await message.answer('–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∞—Ä–±—É–∑?\n–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø—Ä–æ–ø–∏—à–∏—Ç–µ /buywatermelon')


# @dp.message_handler(commands=['buywatermelon'])
# async def buy(message: types.Message):
#     global bill
#     price = 1 #–¶–µ–Ω–∞ –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     lifetime = 7 #–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏
#     comment = '–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞' #–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É, –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –ª—é–±—ã–º
#     bill = p2p.bill(amount=price, lifetime=lifetime, comment=comment) #–°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç
#     link_oplata = bill.pay_url #–ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –∏–∑ –Ω–∞—à–µ–≥–æ —Å—á–µ—Ç–∞
#     await message.answer(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!\n–ê—Ä–±—É–∑ —Å—Ç–æ–∏—Ç: {price} —Ä—É–±–ª–µ–π\n–°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 7 –º–∏–Ω—É—Ç\n–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: {link_oplata}')
#     x = threading.Thread(target=functionoplata, args=(message,)) #Target - –¥–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –∞ –≤ –Ω–∞—à–µ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–ø–ª–∞—Ç—É. Args - –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –¥–æ–ø—É—Å—Ç–∏–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
#     x.start() #–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞

# async def functionoplata(message: types.Message): #–§—É–Ω–∫—Ü–∏—è, –µ–µ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–∞–∂–µ –Ω–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π - –≤–µ–¥—å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –ø–æ—Ç–æ–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
#     oplata_time = datetime.datetime.now() #–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
#     datetime_delta = oplata_time + timedelta(minutes=7) #–ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏.
#     while True: #–°–æ–∑–¥–∞–Ω–∏–µ —Ü–∏–∫–ª–∞
#         status = p2p.check(bill_id=bill.bill_id).status #–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
#         if status == 'PAID': #–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞ —Ç–æ - –¥–æ—à–ª–∞ –ª–∏ –æ–ø–ª–∞—Ç–∞ –¥–æ –±–æ—Ç–∞. –í—Å–ª—É—á–∞–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –æ–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–π if.
#             await message.answer('–û–ø–ª–∞—Ç–∞ –¥–æ—à–ª–∞ –¥–æ –Ω–∞—Å! –ê—É–µ')
#             break #–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞
#         elif datetime.datetime.now() > datetime_delta: #–î–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, –Ω–∞ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã. –¢–æ –µ—Å—Ç—å –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–ø–ª–∞—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–∏ 7-–º–∏ –º–∏–Ω—É—Ç, —Ü–∏–∫–ª –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç—Å—è.
#             await message.answer('–º—É–∂–∏–∫, —Ç—ã —á–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª')
#             break #–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞
#     time.sleep(0.1) #–°–ø–∏–º –Ω–µ–∫–æ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –∫—Ä–∞—à–Ω—É–ª—Å—è.
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True) #–ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
